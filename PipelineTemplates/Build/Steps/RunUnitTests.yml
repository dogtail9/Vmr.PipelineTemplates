parameters:
  - name: TestProjects
    type: object

steps:
  - ${{ each testProject in parameters.TestProjects}}:
      - task: DotNetCoreCLI@2
        displayName: 'Run ${{ testProject.name }}'
        inputs:
          command: 'test'  
          projects: |
            ${{ testProject.projects }}
          arguments: '--configuration Release --no-build --collect:"XPlat Code Coverage"'
          publishTestResults: true
          nobuild: true
          testRunTitle: '$(Build.BuildNumber)-${{ testProject.name }}' #$[replace(${{ testProject.name }},' ', '']'

  - script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool --add-source https://api.nuget.org/v3/index.json --version 5.1.10
      reportgenerator -reports:'$(Agent.TempDirectory)/**/coverage.cobertura.xml' -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura
    displayName: Create Code coverage report

  # - ${{ if eq( variables['Agent.OS'], 'Linux' ) }}:
  #   - script: |
  #       dotnet tool install -g dotnet-reportgenerator-globaltool --add-source https://api.nuget.org/v3/index.json --version 5.1.10
  #       reportgenerator -reports:'$(Agent.TempDirectory)/**/coverage.cobertura.xml' -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura
  #     displayName: Create Code coverage report

  # - ${{ if eq( variables['Agent.OS'], 'Windows_NT' ) }}:
  #   - script: |
  #       dotnet tool install -g dotnet-reportgenerator-globaltool --add-source https://api.nuget.org/v3/index.json --version 5.1.10
  #       reportgenerator -reports:'$(Agent.TempDirectory)\**\coverage.cobertura.xml' -targetdir:$(Build.SourcesDirectory)\CodeCoverage -reporttypes:Cobertura
  #     displayName: Create Code coverage report

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'  